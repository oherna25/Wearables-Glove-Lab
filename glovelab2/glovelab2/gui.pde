/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void trainingMode_button_click1(GButton source, GEvent event) { //_CODE_:trainingMode_button:591036:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
  trainingMode();
} //_CODE_:trainingMode_button:591036:

public void practiceMode_button_click1(GButton source, GEvent event) { //_CODE_:practiceMode_button:408760:
  println("practiceMode_button - GButton >> GEvent." + event + " @ " + millis());
   practiceMode();
} //_CODE_:practiceMode_button:408760:

public void back_button_click1(GButton source, GEvent event) { //_CODE_:back_button:250082:
  println("back_button - GButton >> GEvent." + event + " @ " + millis());
    handMode = false;
   mainMenu();
} //_CODE_:back_button:250082:

public void mode_text_click1(GButton source, GEvent event) { //_CODE_:mode_text:436896:
  println("mode_text - GButton >> GEvent." + event + " @ " + millis());
   background(#28A2D1);
    trainingText.setVisible(true);
    handIn = "";
    handMode = false;
} //_CODE_:mode_text:436896:

public void handInputButton_click1(GButton source, GEvent event) { //_CODE_:handInputButton:864742:
  println("handInput - GButton >> GEvent." + event + " @ " + millis());
    background(#28A2D1);
  trainingText.setVisible(false);
  handIn = "";
  handMode = true;
} //_CODE_:handInputButton:864742:

public void trainingText_click1(GTextField source, GEvent event) { //_CODE_:trainingText:778084:
  println("practiceText - GTextField >> GEvent." + event + " @ " + millis());
     background(#28A2D1);
  userInput = trainingText.getText();
  userInput = userInput.toUpperCase();
  int userLength = userInput.length();
  
  
 
  for ( int i = 0; i < 7; i++  ) {
         //wordMap.get(int('a')
         image(wordMap.get(int( userInput.charAt(i) )), 25 + (i * 90), 100, pic_width/20, pic_height/20);
       }
   for ( int i = 7; i < userLength; i++  ) {
         //wordMap.get(int('a')
         image(wordMap.get(int( userInput.charAt(i) )), 25 + ( max(i-7,0) * 90), 220, pic_width/20, pic_height/20);
       }
  
} //_CODE_:trainingText:778084:

public void clearButton_click1(GButton source, GEvent event) { //_CODE_:clearButton:721902:
  println("clearButton - GButton >> GEvent." + event + " @ " + millis());
   handIn = "";
  userInput = "";
  correct = 0;
} //_CODE_:clearButton:721902:

public void startButton_click1(GButton source, GEvent event) { //_CODE_:startButton:228551:
  println("startButton - GButton >> GEvent." + event + " @ " + millis());
   println("start - GButton >> GEvent." + event + " @ " + millis());
  startPractice = true;
  currentWord = (int) random(0,10);
  handIn = "";
  practiceLabel.setText("SPELL THIS WORD/PHASE: " + words[ currentWord ] );
} //_CODE_:startButton:228551:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  trainingMode_button = new GButton(this, 160, 280, 120, 30);
  trainingMode_button.setText("TRAINING MODE");
  trainingMode_button.addEventHandler(this, "trainingMode_button_click1");
  welcomeLabel = new GLabel(this, 210, 20, 270, 40);
  welcomeLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  welcomeLabel.setText("POIS KEYBOARD TRAINING PROGRAM");
  welcomeLabel.setOpaque(true);
  practiceMode_button = new GButton(this, 370, 280, 120, 30);
  practiceMode_button.setText("PRACTICE MODE");
  practiceMode_button.addEventHandler(this, "practiceMode_button_click1");
  back_button = new GButton(this, 520, 500, 80, 30);
  back_button.setText("BACK");
  back_button.addEventHandler(this, "back_button_click1");
  modeLabel = new GLabel(this, 120, 370, 110, 20);
  modeLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  modeLabel.setText("CHOOSE MODE:");
  modeLabel.setOpaque(true);
  mode_text = new GButton(this, 260, 360, 80, 30);
  mode_text.setText("TEXT MODE");
  mode_text.addEventHandler(this, "mode_text_click1");
  handInputButton = new GButton(this, 360, 360, 90, 30);
  handInputButton.setText("HAND INPUT");
  handInputButton.addEventHandler(this, "handInputButton_click1");
  trainingText = new GTextField(this, 260, 420, 190, 30, G4P.SCROLLBARS_NONE);
  trainingText.setPromptText("ENTER TEXT HERE");
  trainingText.setOpaque(true);
  trainingText.addEventHandler(this, "trainingText_click1");
  clearButton = new GButton(this, 470, 420, 80, 30);
  clearButton.setText("CLEAR");
  clearButton.addEventHandler(this, "clearButton_click1");
  startButton = new GButton(this, 320, 360, 80, 30);
  startButton.setText("START");
  startButton.addEventHandler(this, "startButton_click1");
  practiceLabel = new GLabel(this, 173, 112, 321, 20);
  practiceLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  practiceLabel.setOpaque(true);
}

// Variable declarations 
// autogenerated do not edit
GButton trainingMode_button; 
GLabel welcomeLabel; 
GButton practiceMode_button; 
GButton back_button; 
GLabel modeLabel; 
GButton mode_text; 
GButton handInputButton; 
GTextField trainingText; 
GButton clearButton; 
GButton startButton; 
GLabel practiceLabel; 
